import React, { useEffect, useState, useRef } from 'react';
import {
  StyleSheet,
  View,
  Text,
  SafeAreaView,
  Image,
  TouchableOpacity,
  ScrollView,
  Modal,
  ActivityIndicator,
  Alert,
  BackHandler,
} from 'react-native';
import Header from '../components/Header'; // Import the reusable Header
import { supabase } from "../../supabase/supabaseClient";
import { useLocalSearchParams, useFocusEffect, useRouter } from 'expo-router';
import { Ionicons } from '@expo/vector-icons';
const API_BASE = "http://192.168.100.83:3000/api";

const ViewEventsScreen = () => {
  const [zoomImage, setZoomImage] = useState(null); // State for full-screen image
  const { eventId } = useLocalSearchParams();
  const router = useRouter();
  const [event, setEvent] = useState(null);
  const [loading, setLoading] = useState(true);
  const scrollRef = useRef(null);

  // Ensure Android hardware back goes to Events screen
  useFocusEffect(
    React.useCallback(() => {
      const onBackPress = () => {
        router.replace('/(drawer)/events');
        return true; // consume the event
      };
      const sub = BackHandler.addEventListener('hardwareBackPress', onBackPress);
      // Ensure when this screen is focused, it starts at the top
      // Delay slightly to allow layout/content to settle
      setTimeout(() => {
        scrollRef.current?.scrollTo({ y: 0, animated: false });
      }, 0);
      return () => sub.remove();
    }, [router])
  );

  useEffect(() => {
    const fetchEvent = async () => {
      try {
        const { data } = await supabase.auth.getSession();
        const at = data?.session?.access_token || null;
        const rt = data?.session?.refresh_token || null;
        if (!at || !rt) {
          Alert.alert('Authentication required', 'Please login to view event details.');
          setLoading(false);
          return;
        }
        const res = await fetch(`${API_BASE}/event/getEvents`, {
          method: 'GET',
          headers: {
            Accept: 'application/json',
            'Cookie': `access_token=${at}; refresh_token=${rt}`,
          },
        });
        const json = await res.json();
        if (!res.ok) {
          const msg = json?.error || `Failed to load event (${res.status})`;
          throw new Error(msg);
        }
        const list = Array.isArray(json) ? json : (json?.data || json?.events || []);
        const found = list.find(e => String(e.eventId || e.id) === String(eventId));
        setEvent(found || null);
      } catch (e) {
        console.warn('[viewEvents] fetch error:', e?.message || e);
        Alert.alert('Error', e?.message || 'Failed to load event');
      } finally {
        setLoading(false);
      }
    };
    fetchEvent();
  }, [eventId]);

  return (
    <SafeAreaView style={styles.container}>
      <Header title="Events" showSearch={false} />

      {loading ? (
        <View style={styles.loadingBox}>
          <ActivityIndicator size="large" color="#000" />
        </View>
      ) : (
        <ScrollView ref={scrollRef} style={styles.scrollView}>
          {/* Event Banner */}
          <TouchableOpacity
            style={{ ...styles.bannerContainer, marginTop: 5 }}
            onPress={() => event?.image && setZoomImage({ uri: event.image })}
          >
            {event?.image ? (
              <Image source={{ uri: event.image }} style={styles.bannerImage} />
            ) : (
              <View style={[styles.bannerImage, { justifyContent: 'center', alignItems: 'center', backgroundColor: '#f2f2f2' }]}>
                <Ionicons name="image-outline" size={64} color="#9e9e9e" />
              </View>
            )}
          </TouchableOpacity>

          {/* Buttons */}
          <View style={styles.buttonContainer}>
            <TouchableOpacity style={styles.button}>
              <Text style={styles.buttonText}>{event?.title || 'Event'}</Text>
            </TouchableOpacity>
            <TouchableOpacity style={[styles.button, styles.secondaryButton]}>
              <Text style={styles.secondaryButtonText}>Add to Calendar</Text>
            </TouchableOpacity>
          </View>

          {/* Description Section */}
          <View style={styles.textSection}>
            {!!event?.details && (
              <Text style={styles.description}>{event.details}</Text>
            )}
          </View>

          {/* Activities Section */}
          <View style={styles.activitiesSection}>
            <Text style={styles.activitiesTitle}>
              <Ionicons name="color-palette-outline" size={20} color="#333" />{' '}Activities Include:
            </Text>
            {(Array.isArray(event?.activities) ? event.activities : [])
              .map((act, idx) => (
                <Text style={styles.activityItem} key={idx}>â€¢ {act}</Text>
              ))}
          </View>

          {/* Admission */}
          {(event?.admission || event?.admissionNote) && (
            <View style={styles.textSection}>
              <Text style={styles.activitiesTitle}>
                <Ionicons name="pricetag-outline" size={20} color="#333" />{' '}Admission
              </Text>
              {!!event?.admission && (
                <Text style={styles.description}>{event.admission}</Text>
              )}
              {!!event?.admissionNote && (
                <Text style={styles.description}>{event.admissionNote}</Text>
              )}
            </View>
          )}

          {/* Venue */}
          {(event?.venueName || event?.venueAddress) && (
            <View style={styles.textSection}>
              <Text style={styles.activitiesTitle}>
                <Ionicons name="location-outline" size={20} color="#333" />{' '}Venue
              </Text>
              {!!event?.venueName && (
                <Text style={styles.description}>{event.venueName}</Text>
              )}
              {!!event?.venueAddress && (
                <Text style={styles.description}>{event.venueAddress}</Text>
              )}
            </View>
          )}

          {/* Date & Time */}
          {(event?.startsAt || event?.endsAt) && (
            <View style={styles.textSection}>
              <Text style={styles.activitiesTitle}>
                <Ionicons name="calendar-outline" size={20} color="#333" />{' '}Date & Time
              </Text>
              {!!event?.startsAt && (
                <Text style={styles.description}>Start: {new Date(event.startsAt).toLocaleString()}</Text>
              )}
              {!!event?.endsAt && (
                <Text style={styles.description}>End: {new Date(event.endsAt).toLocaleString()}</Text>
              )}
            </View>
          )}
        </ScrollView>
      )}

      {/* Full-screen image modal */}
      <Modal
        visible={zoomImage !== null}
        transparent={true}
        animationType="fade"
        onRequestClose={() => setZoomImage(null)}
      >
        <TouchableOpacity style={styles.fullScreenContainer} onPress={() => setZoomImage(null)}>
          <Image source={zoomImage} style={styles.fullScreenImage} resizeMode="contain" />
        </TouchableOpacity>
      </Modal>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
  },
  scrollView: {
    flex: 1,
  },
  loadingBox: { flex: 1, justifyContent: 'center', alignItems: 'center' },
  bannerContainer: {
    width: '100%',
    aspectRatio: 16 / 9,
  },
  bannerImage: {
    width: '100%',
    height: '100%',
    resizeMode: 'cover',
  },
  buttonContainer: {
    paddingHorizontal: 20,
    marginTop: 20,
  },
  button: {
    backgroundColor: '#333',
    paddingVertical: 15,
    borderRadius: 8,
    alignItems: 'center',
    marginBottom: 10,
  },
  buttonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
  },
  secondaryButton: {
    backgroundColor: '#fff',
    borderWidth: 1,
    borderColor: '#333',
  },
  secondaryButtonText: {
    color: '#333',
    fontSize: 16,
    fontWeight: 'bold',
  },
  textSection: {
    paddingHorizontal: 20,
    marginTop: 20,
  },
  description: {
    fontSize: 16,
    color: '#555',
    lineHeight: 24,
    marginBottom: 15,
  },
  activitiesSection: {
    paddingHorizontal: 20,
    marginTop: 10,
    marginBottom: 50,
  },
  activitiesTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 10,
  },
  activityItem: {
    fontSize: 16,
    color: '#555',
    marginBottom: 5,
  },
  // Full-screen image modal
  fullScreenContainer: {
    flex: 1,
    backgroundColor: 'rgba(0,0,0,0.95)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  fullScreenImage: {
    width: '100%',
    height: '100%',
  },
});

export default ViewEventsScreen;
