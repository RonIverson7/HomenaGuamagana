import React, { useState, useEffect } from 'react';
import {
  StyleSheet,
  View,
  Text,
  SafeAreaView,
  Image,
  TouchableOpacity,
  Modal,
  TextInput,
  TouchableWithoutFeedback,
  FlatList,
  ScrollView,
  Platform,
  KeyboardAvoidingView,
  Keyboard,
} from 'react-native';
import { Feather, Ionicons } from '@expo/vector-icons';
import * as ImagePicker from 'expo-image-picker';
import DateTimePicker from '@react-native-community/datetimepicker';
import Header from '../components/Header';
import { supabase } from "../../supabase/supabaseClient";
import { useRouter } from "expo-router";


const HomeScreen = () => {
  const [selectedImage, setSelectedImage] = useState(null);
  const [modalVisible, setModalVisible] = useState(false);
  const [postText, setPostText] = useState('');
  const [pickedImages, setPickedImages] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [posts, setPosts] = useState([]);
  const [likes, setLikes] = useState({});
  const [comments, setComments] = useState({});
  const [userLikes, setUserLikes] = useState({});
  const [accessToken, setAccessToken] = useState(null);
  const [refreshToken, setRefreshToken] = useState(null);


  const [commentModalVisible, setCommentModalVisible] = useState(false);
  const [currentPostComments, setCurrentPostComments] = useState([]);
  const [currentPostId, setCurrentPostId] = useState(null);
  const [newCommentText, setNewCommentText] = useState('');


  // Profile modal and fields
  const [profileModalVisible, setProfileModalVisible] = useState(false);


  const [firstName, setFirstName] = useState("");
  const [middleName, setMiddleName] = useState("");
  const [lastName, setLastName] = useState("");
  const [userNameField, setUserNameField] = useState("");
  const [username, setUsername] = useState("");
  const [gender, setGender] = useState("");
  const [birthday, setBirthday] = useState(new Date());
  const [showDatePicker, setShowDatePicker] = useState(false);
  const [showGenderDropdown, setShowGenderDropdown] = useState(false);
  const [address, setAddress] = useState("");
  const [bio, setBio] = useState("");
  const [about, setAbout] = useState("");
  const [image, setImage] = useState(null);
  const [backgroundImage, setBackgroundImage] = useState(null);


  // Temporary unsaved edits
  const [tempImage, setTempImage] = useState(null);
  const [tempBackgroundImage, setTempBackgroundImage] = useState(null);


  const formattedDate = birthday.toLocaleDateString("en-US");


  const router = useRouter();
  const API_BASE = "http://192.168.18.22:3000/api";


  useEffect(() => {
    const init = async () => {
      try {
        setLoading(true);
        const { data } = await supabase.auth.getSession();
        const at = data?.session?.access_token || null;
        const rt = data?.session?.refresh_token || null;
        setAccessToken(at);
        setRefreshToken(rt);


        if (!username) {
          setProfileModalVisible(true);
        }


        await fetchPosts(at, rt);
      } catch (e) {
        setError(e.message || "Failed to initialize session");
      } finally {
        setLoading(false);
      }
    };
    init();
  }, []);


  const fetchPosts = async (at = accessToken, rt = refreshToken) => {
    try {
      setLoading(true);
      const session = await supabase.auth.getSession();
      const currentUserId = session?.data?.session?.user?.id;


      const res = await fetch(`${API_BASE}/homepage/getPost`, {
        method: 'GET',
        headers: {
          'Cookie': `access_token=${at}; refresh_token=${rt}`,
        },
      });
      const data = await res.json();


      setPosts(data.posts || []);


      const reactCounts = {};
      data.reacts?.forEach(r => {
        reactCounts[r.postId] = (reactCounts[r.postId] || 0) + 1;
      });
      setLikes(reactCounts);


      const commentCounts = {};
      data.comments?.forEach(c => {
        commentCounts[c.postId] = (commentCounts[c.postId] || 0) + 1;
      });
      setComments(commentCounts);


      const initialLikes = {};
      data.reacts?.forEach(r => {
        if (r.userId === currentUserId) {
          initialLikes[r.postId] = true;
        }
      });
      setUserLikes(initialLikes);


    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };


  const pickImage = async () => {
    const result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.Images,
      quality: 1,
      allowsMultipleSelection: true,
    });
    if (!result.canceled) {
      const uris = result.assets.map(asset => asset.uri);
      setPickedImages(prev => [...prev, ...uris]);
    }
  };


  const uploadPost = async () => {
    if (!postText && pickedImages.length === 0) return;


    const formData = new FormData();
    formData.append("description", postText);
    pickedImages.forEach((uri, index) => {
      const filename = uri.split("/").pop();
      const match = /\.(\w+)$/.exec(filename);
      const type = match ? `image/${match[1]}` : `image`;
      formData.append("media", { uri, name: filename, type });
    });


    try {
      setLoading(true);
      const res = await fetch(`${API_BASE}/homepage/createPost`, {
        method: "POST",
        headers: {
          "Content-Type": "multipart/form-data",
          'Cookie': `access_token=${accessToken}; refresh_token=${refreshToken}`,
        },
        body: formData,
      });
      const data = await res.json();
      setModalVisible(false);
      setPostText("");
      setPickedImages([]);
      fetchPosts();
    } catch (err) {
      setError("Failed to upload post");
    } finally {
      setLoading(false);
    }
  };


  const handleLike = async (postId) => {
    const alreadyLiked = userLikes[postId] || false;


    setUserLikes(prev => ({
      ...prev,
      [postId]: !alreadyLiked,
    }));


    try {
      const res = await fetch(`${API_BASE}/homepage/createReact`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Cookie': `access_token=${accessToken}; refresh_token=${refreshToken}`,
        },
        body: JSON.stringify({ postId }),
      });


      if (!res.ok) throw new Error(`Failed to react (${res.status})`);
      await fetchPosts();
    } catch (e) {
      console.error(e.message);
      setUserLikes(prev => ({
        ...prev,
        [postId]: alreadyLiked,
      }));
    }
  };


  const openCommentsModal = async (postId) => {
    try {
      setLoading(true);
      const res = await fetch(`${API_BASE}/homepage/getComments?postId=${postId}`, {
        method: 'GET',
        headers: { 'Cookie': `access_token=${accessToken}; refresh_token=${refreshToken}` },
      });
      const data = await res.json();
      setCurrentPostComments(data.comments || []);
      setCurrentPostId(postId);
      setCommentModalVisible(true);
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };


  const postComment = async () => {
    if (!newCommentText.trim()) return;


    try {
      await fetch(`${API_BASE}/homepage/createComment`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Cookie': `access_token=${accessToken}; refresh_token=${refreshToken}`,
        },
        body: JSON.stringify({
          postId: currentPostId,
          text: newCommentText,
        }),
      });
      setNewCommentText('');
      openCommentsModal(currentPostId); // refresh comments
      fetchPosts();
    } catch (err) {
      console.error(err);
    }
  };


  const removeImage = (index) => {
    setPickedImages(prev => prev.filter((_, i) => i !== index));
  };


  const pickProfileImage = async () => {
    const result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.Images,
      allowsEditing: true,
      aspect: [1, 1],
      quality: 1,
    });


    if (!result.canceled) {
      setTempImage({ uri: result.assets[0].uri });
    }
  };


  const pickBackgroundImage = async () => {
    const result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.Images,
      allowsEditing: true,
      aspect: [16, 9],
      quality: 1,
    });


    if (!result.canceled) {
      setTempBackgroundImage({ uri: result.assets[0].uri });
    }
  };


  const handleProfileSave = () => {
    const displayName =
      userNameField || [firstName, middleName, lastName].filter(Boolean).join(" ");
    setUsername(displayName);


    setImage(tempImage);
    setBackgroundImage(tempBackgroundImage);


    setProfileModalVisible(false);
  };


  const onChangeDate = (event, selectedDate) => {
    if (selectedDate) {
      setBirthday(selectedDate);
    }
    if (Platform.OS === "android") {
      setShowDatePicker(false);
    }
  };


  const renderPost = ({ item: post }) => (
    <View key={post.id} style={styles.card}>
      <View style={styles.userInfo}>
        <Image source={{ uri: post.user?.avatar }} style={styles.avatar} />
        <Text style={styles.username}>{post.user?.name}</Text>
      </View>


      {!!post.text && <Text style={styles.description}>{post.text}</Text>}


      {!!post.image && (
        <TouchableOpacity onPress={() => setSelectedImage({ uri: post.image })}>
          <Image source={{ uri: post.image }} style={styles.postImage} resizeMode="cover" />
        </TouchableOpacity>
      )}


      {!!post.timestamp && (
        <Text style={styles.timestamp}>{post.timestamp}</Text>
      )}


      <View style={styles.actions}>
        <TouchableOpacity onPress={() => handleLike(post.id)} style={{ flexDirection: 'row', alignItems: 'center' }}>
          <Ionicons
            name={userLikes[post.id] ? "heart" : "heart-outline"}
            size={20}
            color={userLikes[post.id] ? "red" : "#555"}
          />
          <Text style={styles.likeText}>{likes[post.id] || 0}</Text>
        </TouchableOpacity>


        <TouchableOpacity style={{ flexDirection: 'row', alignItems: 'center', marginLeft: 12 }} onPress={() => openCommentsModal(post.id)}>
          <Feather name="message-circle" size={20} color="#555" />
          <Text style={{ marginLeft: 4 }}>{comments[post.id] || 0}</Text>
        </TouchableOpacity>
      </View>
    </View>
  );

  // Updated render function for comments to include timestamp below each comment
  const renderComment = ({ item }) => (
    <View style={styles.commentBox}>
      <Image source={{ uri: item.user?.avatar }} style={styles.avatar} />
      <View style={{ flex: 1 }}>
        <Text style={{ fontWeight: 'bold' }}>{item.user?.name}</Text>
        <Text>{item.text}</Text>
        {/* Show comment timestamp below comment text */}
        {!!item.timestamp && (
          <Text style={styles.commentTimestamp}>{item.timestamp}</Text>
        )}
      </View>
    </View>
  );


  return (
    <SafeAreaView style={styles.container}>
      <Header title="HOME" showSearch={true} />


      {error && <Text style={{ color: 'red', margin: 10 }}>{error}</Text>}


      <TouchableOpacity style={styles.postOverlayBox} onPress={() => setModalVisible(true)}>
        <Ionicons name="create-outline" size={24} color="#555" style={{ marginRight: 8 }} />
        <Text style={{ color: '#555' }}>What's on your mind?</Text>
      </TouchableOpacity>


      <FlatList
        data={posts}
        keyExtractor={(item) => item.id.toString()}
        renderItem={renderPost}
        contentContainerStyle={{ paddingBottom: 120 }}
        ListEmptyComponent={loading ? <Text style={{ margin: 12 }}>Loading...</Text> : null}
      />


      {/* Image fullscreen modal */}
      <Modal visible={selectedImage !== null} transparent animationType="fade">
        <TouchableOpacity style={styles.fullScreenContainer} onPress={() => setSelectedImage(null)}>
          <Image source={selectedImage} style={styles.fullScreenImage} resizeMode="contain" />
        </TouchableOpacity>
      </Modal>


      {/* Create Post modal */}
      <Modal visible={modalVisible} transparent animationType="fade">
        <TouchableWithoutFeedback onPress={() => setModalVisible(false)}>
          <View style={styles.modalBackground}>
            <TouchableWithoutFeedback>
              <View style={styles.modalCard}>
                <Text style={{ fontSize: 16, fontWeight: 'bold', marginBottom: 10 }}>Create Post</Text>
                <View style={styles.modalInputBox}>
                  <Image source={{ uri: 'https://randomuser.me/api/portraits/men/99.jpg' }} style={styles.avatar} />
                  <TextInput
                    style={styles.modalInput}
                    placeholder="What's on your mind?"
                    placeholderTextColor="#555"
                    value={postText}
                    onChangeText={setPostText}
                    multiline
                  />
                </View>


                <FlatList
                  horizontal
                  data={pickedImages}
                  keyExtractor={(_, index) => index.toString()}
                  showsHorizontalScrollIndicator={false}
                  renderItem={({ item, index }) => (
                    <View style={{ position: 'relative', marginRight: 10 }}>
                      <Image source={{ uri: item }} style={styles.previewImage} />
                      <TouchableOpacity onPress={() => removeImage(index)} style={styles.removeImageBtn}>
                        <Ionicons name="close" size={18} color="black" />
                      </TouchableOpacity>
                    </View>
                  )}
                  ListFooterComponent={
                    <TouchableOpacity onPress={pickImage} style={styles.addMoreBtn} activeOpacity={0.7}>
                      <Ionicons name="image-outline" size={40} color="black" />
                      <Text style={styles.addPhotoText}>Add Photo</Text>
                    </TouchableOpacity>
                  }
                />


                <TouchableOpacity style={styles.postButton} onPress={uploadPost}>
                  <Text style={styles.postButtonText}>Post</Text>
                </TouchableOpacity>
              </View>
            </TouchableWithoutFeedback>
          </View>
        </TouchableWithoutFeedback>
      </Modal>


      {/* Comments Modal */}
      <Modal visible={commentModalVisible} animationType="slide">
        <SafeAreaView style={styles.container}>
          <View style={{ flexDirection: 'row', alignItems: 'center', padding: 10 }}>
            <TouchableOpacity onPress={() => setCommentModalVisible(false)}>
              <Ionicons name="arrow-back" size={24} color="#000" />
            </TouchableOpacity>
            <Text style={{ fontSize: 18, fontWeight: 'bold', marginLeft: 10 }}>Comments</Text>
          </View>
          <FlatList
            data={currentPostComments}
            keyExtractor={(item) => item.id.toString()}
            renderItem={renderComment} 
          />
          <View style={styles.commentInputContainer}>
            <TextInput
              style={styles.commentInput}
              placeholder="Add a comment..."
              value={newCommentText}
              onChangeText={setNewCommentText}
            />
            <TouchableOpacity onPress={postComment} style={styles.sendButton}>
              <Ionicons name="send" size={20} color="white" />
            </TouchableOpacity>
          </View>
        </SafeAreaView>
      </Modal>


      {/* Complete Your Profile Modal */}
      <Modal visible={profileModalVisible} animationType="fade" transparent>
        <TouchableWithoutFeedback onPress={Keyboard.dismiss}>
          <View style={styles.modalOverlay}>
            <KeyboardAvoidingView
              behavior={Platform.OS === "ios" ? "padding" : "height"}
              style={styles.keyboardView}
            >
              <ScrollView
                contentContainerStyle={styles.modalBox}
                keyboardShouldPersistTaps="handled"
              >
                <Text style={styles.modalTitle}>Complete Your Profile</Text>


                <TouchableOpacity onPress={pickProfileImage} style={styles.imagePicker}>
                  {tempImage ? (
                    <Image source={tempImage} style={styles.avatarEdit} />
                  ) : (
                    <View style={[styles.avatarEdit, styles.placeholderCircle]}>
                      <Ionicons name="person" size={40} color="#999" />
                    </View>
                  )}
                  <Text style={styles.changePhotoText}>Change Profile Photo</Text>
                </TouchableOpacity>


                <TouchableOpacity onPress={pickBackgroundImage} style={styles.imagePicker}>
                  <View style={styles.backgroundPreviewContainer}>
                    {tempBackgroundImage ? (
                      <Image source={{ uri: tempBackgroundImage.uri }} style={styles.backgroundPreviewImage} resizeMode="cover" />
                    ) : (
                      <View style={[styles.backgroundPreviewImage, styles.placeholderCircle]}>
                        <Ionicons name="image" size={40} color="#999" />
                      </View>
                    )}
                  </View>
                  <Text style={styles.changePhotoText}>Change Background Photo</Text>
                </TouchableOpacity>


                <TextInput
                  style={styles.input}
                  placeholder="First Name"
                  placeholderTextColor="#999"
                  value={firstName}
                  onChangeText={setFirstName}
                />
                <TextInput
                  style={styles.input}
                  placeholder="Middle Name"
                  placeholderTextColor="#999"
                  value={middleName}
                  onChangeText={setMiddleName}
                />
                <TextInput
                  style={styles.input}
                  placeholder="Last Name"
                  placeholderTextColor="#999"
                  value={lastName}
                  onChangeText={setLastName}
                />


                <TextInput
                  style={styles.input}
                  placeholder="Username"
                  placeholderTextColor="#999"
                  value={userNameField}
                  onChangeText={setUserNameField}
                />


                <View style={styles.inputContainer}>
                  <TouchableOpacity
                    style={styles.input}
                    onPress={() => setShowGenderDropdown(!showGenderDropdown)}
                    activeOpacity={0.8}
                  >
                    <Text style={{ color: gender ? "#000" : "#999" }}>
                      {gender || "Select Sex"}
                    </Text>
                    <Ionicons
                      name={showGenderDropdown ? "chevron-up" : "chevron-down"}
                      size={20}
                      color="#555"
                      style={{ position: "absolute", right: 10, top: 12 }}
                    />
                  </TouchableOpacity>


                  {showGenderDropdown && (
                    <View style={styles.dropdownList}>
                      {["Male", "Female", "Others"].map((item) => (
                        <TouchableOpacity
                          key={item}
                          style={styles.dropdownItem}
                          onPress={() => {
                            setGender(item);
                            setShowGenderDropdown(false);
                          }}
                        >
                          <Text style={styles.dropdownItemText}>{item}</Text>
                        </TouchableOpacity>
                      ))}
                    </View>
                  )}
                </View>


                <TouchableOpacity
                  style={styles.input}
                  onPress={() => setShowDatePicker(true)}
                >
                  <Text style={{ color: birthday ? "#000" : "#888" }}>
                    {birthday
                      ? `Birthday: ${formattedDate}`
                      : "Select your birthday"}
                  </Text>
                </TouchableOpacity>


                {showDatePicker && (
                  <DateTimePicker
                    value={birthday}
                    mode="date"
                    display="default"
                    onChange={onChangeDate}
                  />
                )}


                <TextInput
                  style={styles.input}
                  placeholder="Enter your address"
                  placeholderTextColor="#999"
                  value={address}
                  onChangeText={setAddress}
                />
                <TextInput
                  style={styles.input}
                  placeholder="Enter your bio"
                  placeholderTextColor="#999"
                  value={bio}
                  onChangeText={setBio}
                />
                <TextInput
                  style={[styles.input, { height: 80 }]}
                  placeholder="Write something about yourself"
                  placeholderTextColor="#999"
                  multiline
                  value={about}
                  onChangeText={setAbout}
                />


                <View style={styles.modalButtons}>
                  <TouchableOpacity
                    style={styles.cancelButton}
                    onPress={() => setProfileModalVisible(false)}
                  >
                    <Text style={styles.cancelButtonText}>Cancel</Text>
                  </TouchableOpacity>
                  <TouchableOpacity style={styles.saveButton} onPress={handleProfileSave}>
                    <Text style={styles.saveButtonText}>Save</Text>
                  </TouchableOpacity>
                </View>
              </ScrollView>
            </KeyboardAvoidingView>
          </View>
        </TouchableWithoutFeedback>
      </Modal>
    </SafeAreaView>
  );
};


const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: '#fff' },
  postOverlayBox: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 12,
    marginHorizontal: 12,
    borderRadius: 12,
    borderWidth: 0.8,
    borderColor: '#ccc',
    backgroundColor: '#f9f9f9',
    marginBottom: 10,
  },
  avatar: { width: 40, height: 40, borderRadius: 20, marginRight: 8 },
  modalBackground: {
    flex: 1,
    backgroundColor: 'rgba(0,0,0,0.4)',
    justifyContent: 'center',
    paddingHorizontal: 20,
  },
  modalCard: {
    backgroundColor: '#fff',
    borderRadius: 15,
    padding: 15,
    shadowColor: '#000',
    shadowOpacity: 0.2,
    shadowRadius: 8,
    elevation: 5,
  },
  modalInputBox: { flexDirection: 'row', alignItems: 'center', marginBottom: 10 },
  modalInput: {
    flex: 1,
    backgroundColor: '#f0f2f5',
    borderRadius: 20,
    paddingHorizontal: 12,
    paddingVertical: 10,
    marginBottom: 15,
    color: '#000',
  },
  previewImage: { width: 90, height: 90, borderRadius: 12 },
  removeImageBtn: {
    position: 'absolute',
    top: -8,
    right: -8,
    width: 26,
    height: 26,
    borderRadius: 13,
    backgroundColor: 'white',
    justifyContent: 'center',
    alignItems: 'center',
    elevation: 3,
  },
  addMoreBtn: {
    width: 90,
    height: 90,
    borderRadius: 12,
    borderWidth: 1.5,
    borderColor: 'black',
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 10,
  },
  addPhotoText: { color: 'black', fontSize: 12, marginTop: 4, fontWeight: '600' },
  postButton: { backgroundColor: 'black', paddingVertical: 12, borderRadius: 25, alignItems: 'center', marginTop: 5 },
  postButtonText: { color: '#fff', fontWeight: 'bold', fontSize: 16 },
  card: {
    backgroundColor: 'white',
    borderRadius: 10,
    padding: 10,
    marginBottom: 12,
    marginHorizontal: 10,
    shadowColor: 'black',
    shadowOpacity: 0.09,
    shadowRadius: 4,
    elevation: 2,
  },
  userInfo: { flexDirection: 'row', alignItems: 'center', marginBottom: 5 },
  username: { fontWeight: 'bold' },
  description: { marginBottom: 8 },
  timestamp: {
    color: '#999',
    fontSize: 12,
    marginTop: 4,
    marginBottom: 4,
  },
  postImage: { width: '100%', height: 180, borderRadius: 8, marginBottom: 10 },
  actions: { flexDirection: 'row', alignItems: 'center', marginTop: 8 },
  likeContainer: { flexDirection: 'row', alignItems: 'center', marginRight: 12 },
  likeText: { marginLeft: 4, color: 'red' },
  fullScreenContainer: { flex: 1, backgroundColor: 'rgba(0,0,0,0.95)', justifyContent: 'center', alignItems: 'center' },
  fullScreenImage: { width: '100%', height: '100%' },
  commentBox: { flexDirection: 'row', padding: 10, borderBottomWidth: 1, borderColor: '#eee' },
  commentTimestamp: {
    fontSize: 10,
    color: '#999',
    marginTop: 2,
  },
  commentInputContainer: { flexDirection: 'row', padding: 10, borderTopWidth: 1, borderColor: '#eee' },
  commentInput: { flex: 1, backgroundColor: '#f0f2f5', borderRadius: 20, paddingHorizontal: 12 },
  sendButton: { backgroundColor: 'black', borderRadius: 20, padding: 10, marginLeft: 8 },


  modalOverlay: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: "rgba(0,0,0,0.4)",
  },
  keyboardView: { flex: 1, width: "100%" },
  modalBox: {
    backgroundColor: "#fff",
    padding: 20,
    borderRadius: 15,
    elevation: 5,
    alignItems: "center",
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: "bold",
    marginTop: 30,
    marginBottom: 15,
  },
  imagePicker: { alignItems: "center", marginVertical: 10 },
  avatarEdit: { width: 90, height: 90, borderRadius: 45 },
  changePhotoText: {
    textAlign: "center",
    color: "#007BFF",
    marginTop: 5,
    marginBottom: 10,
  },
  input: {
    backgroundColor: "#f9f9f9",
    borderWidth: 1,
    borderColor: "#ccc",
    borderRadius: 10,
    padding: 10,
    marginVertical: 5,
    width: "100%",
  },
  inputContainer: {
    width: "100%",
    position: "relative",
  },
  dropdownList: {
    width: "100%",
    backgroundColor: "#fff",
    borderWidth: 1,
    borderColor: "#ccc",
    borderRadius: 10,
    marginTop: -5,
    elevation: 3,
    zIndex: 10,
  },
  dropdownItem: {
    paddingVertical: 12,
    paddingHorizontal: 10,
    borderBottomWidth: 1,
    borderBottomColor: "#eee",
  },
  dropdownItemText: {
    fontSize: 16,
    color: "#000",
  },
  modalButtons: {
    flexDirection: "row",
    justifyContent: "space-between",
    marginTop: 15,
    width: "100%",
  },
  saveButton: {
    backgroundColor: "black",
    paddingVertical: 8,
    paddingHorizontal: 25,
    borderRadius: 20,
  },
  saveButtonText: { color: "#fff", fontWeight: "bold" },
  cancelButton: {
    backgroundColor: "#eee",
    paddingVertical: 8,
    paddingHorizontal: 25,
    borderRadius: 20,
  },
  cancelButtonText: { color: "black", fontWeight: "bold" },
  placeholderCircle: {
    backgroundColor: "#f0f0f0",
    justifyContent: "center",
    alignItems: "center",
    borderWidth: 1,
    borderColor: "#ddd",
  },
  backgroundPreviewContainer: {
    width: 300,
    height: 100,
    borderRadius: 10,
    overflow: "hidden",
    backgroundColor: "#f0f0f0",
    justifyContent: "center",
    alignItems: "center",
    alignSelf: "center",
  },
  backgroundPreviewImage: {
    width: "100%",
    height: "100%",
  },
});


export default HomeScreen;
