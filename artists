import React, { useEffect, useState } from 'react';
import { StyleSheet, View, Text, SafeAreaView, Image, ScrollView, TouchableOpacity, RefreshControl } from 'react-native';

import { Ionicons } from '@expo/vector-icons';
import Header from '../components/Header'; // Import the reusable Header
import { supabase } from "../../supabase/supabaseClient";
import { useRouter } from "expo-router";
import AndroidFooterSpacer from '../components/Footer';

// Reusable component for each artist card
const ArtistCard = ({ name, imageSource, onPress }) => {
  // Support both local require() images and remote URL strings
  const resolvedSource = typeof imageSource === 'string' ? { uri: imageSource } : imageSource;
  return (
    <TouchableOpacity style={styles.artistCard} activeOpacity={0.8} onPress={onPress}>
      {resolvedSource ? (
        <Image source={resolvedSource} style={styles.artistImage} />
      ) : (
        <View style={[styles.artistImage, styles.placeholderCircle]} />
      )}
      <Text style={styles.artistName}>{name}</Text>
    </TouchableOpacity>
  );
};

const ArtistsScreen = () => {
  // Match home.js approach
  const API_BASE = "http://192.168.18.22:3000/api";
  const router = useRouter();

  // Start with empty list; we will fetch from backend
  const [artists, setArtists] = useState([]);
  const [accessToken, setAccessToken] = useState(null);
  const [refreshToken, setRefreshToken] = useState(null);
  const [loading, setLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState('');
  const [refreshing, setRefreshing] = useState(false);

  // Fetch function (reusable for initial load and pull-to-refresh)
  const fetchArtists = async (at = accessToken, rt = refreshToken) => {
    try {
      const res = await fetch(`${API_BASE}/artist/getArtist`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Cookie': `access_token=${at || ''}; refresh_token=${rt || ''}`,
        },
      });

      if (!res.ok) {
        console.warn('[artists.js] Failed to fetch artists:', res.status, res.statusText);
        setArtists([]);
        return;
      }

      const json = await res.json();
      const list = Array.isArray(json?.artists) ? json.artists : [];
      const mappedArtists = list.map((a) => ({
        id: a.id || a.username || String(Math.random()),
        username: a.username || null,
        name: a.name || a.username || 'Untitled Artist',
        image: a.hero || a.image || null,
        createdAt: a.createdAt || a.created_at || a.createdTime || null,
      }));

      const sortedArtists = mappedArtists.sort((a, b) => {
        const dateA = new Date(a.createdAt || 0).getTime();
        const dateB = new Date(b.createdAt || 0).getTime();
        return dateB - dateA;
      });

      setArtists(sortedArtists);
    } catch (e) {
      console.warn('[artists.js] Error fetching artists:', e?.message || e);
      setArtists([]);
    }
  };

  useEffect(() => {
    let isMounted = true;
    const initAndFetch = async () => {
      try {
        const { data } = await supabase.auth.getSession();
        const at = data?.session?.access_token || null;
        const rt = data?.session?.refresh_token || null;
        if (isMounted) {
          setAccessToken(at);
          setRefreshToken(rt);
        }
        setLoading(true);
        await fetchArtists(at, rt);
      } catch (e) {
        console.warn('[artists.js] init error:', e?.message || e);
      } finally {
        if (isMounted) setLoading(false);
      }
    };
    initAndFetch();
    return () => { isMounted = false; };
  }, [API_BASE]);

  // Filter artists based on search query
  const filteredArtists = artists.filter(artist => {
    if (!searchQuery.trim()) return true;
    const query = searchQuery.toLowerCase();
    const name = (artist.name || '').toLowerCase();
    const username = (artist.username || '').toLowerCase();
    return name.includes(query) || username.includes(query);
  });

  const handleSearch = (text) => {
    setSearchQuery(text);
  };

  // Pull to refresh handler
  const onRefresh = async () => {
    setRefreshing(true);
    try {
      await fetchArtists(accessToken, refreshToken);
    } catch (err) {
      console.error('Refresh error:', err);
    } finally {
      setRefreshing(false);
    }
  };

  return (
    <SafeAreaView style={styles.container}>
      {/* Reusable Header with search */}
      <Header title="Artists" showSearch={true} onSearch={handleSearch} />

      {/* Artist Grid */}
      <ScrollView
        style={styles.artistGrid}
        refreshControl={
          <RefreshControl
            refreshing={refreshing}
            onRefresh={onRefresh}
            colors={['#000']}
            tintColor="#000"
          />
        }
      >
        {loading && artists.length === 0 ? (
          <Text style={{ margin: 12 }}>Loading...</Text>
        ) : null}
        <View style={styles.row}>
          {filteredArtists.length > 0 ? (
            filteredArtists.map(artist => (
              <ArtistCard
                key={artist.id}
                name={artist.name}
                imageSource={artist.image}
                onPress={() => {
                  router.push({
                    pathname: '/(drawer)/viewArtist',
                    params: {
                      id: String(artist.id ?? ''),
                      username: String(artist.username ?? ''),
                      name: String(artist.name ?? ''),
                    },
                  });
                }}
              />
            ))
          ) : !loading && searchQuery.trim() ? (
            <View style={styles.noResults}>
              <Ionicons name="search-outline" size={64} color="#ccc" />
              <Text style={styles.noResultsTitle}>No results found</Text>
              <Text style={styles.noResultsText}>
                Try searching for different keywords
              </Text>
            </View>
          ) : !loading && artists.length === 0 ? (
            <View style={styles.noResults}>
              <Ionicons name="people-outline" size={64} color="#ccc" />
              <Text style={styles.noResultsTitle}>No artists available</Text>
              <Text style={styles.noResultsText}>
                Check back later for featured artists
              </Text>
            </View>
          ) : null}
        </View>
      </ScrollView>
      <AndroidFooterSpacer />
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
  },
  artistGrid: {
    padding: 10,
  },
  row: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'space-between',
  },
  artistCard: {
    width: '48%',
    alignItems: 'center',
    backgroundColor: 'white',
    borderRadius: 10,
    padding: 10,
    marginBottom: 10,
    shadowColor: '#000',
    shadowOpacity: 0.1,
    shadowRadius: 5,
    elevation: 2,
  },
  artistImage: {
    width: 100,
    height: 100,
    borderRadius: 50,
    marginBottom: 10,
  },
  placeholderCircle: {
    backgroundColor: '#e9e9e9',
    borderWidth: 1,
    borderColor: '#ddd',
  },
  artistName: {
    fontWeight: 'bold',
    textAlign: 'center',
  },
  noResults: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingVertical: 60,
    paddingHorizontal: 20,
    width: '100%',
  },
  noResultsTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
    marginTop: 16,
    marginBottom: 8,
  },
  noResultsText: {
    fontSize: 14,
    color: '#999',
    textAlign: 'center',
  },
});

export default ArtistsScreen;
