import React, { useState, useEffect } from 'react';
import { StyleSheet, View, Text, SafeAreaView, Image, TouchableOpacity, ScrollView, ActivityIndicator, FlatList, RefreshControl, Modal, TextInput, KeyboardAvoidingView, TouchableWithoutFeedback, Keyboard, Alert, Platform } from 'react-native';
import { useNavigation, useRouter } from 'expo-router';
import { Ionicons } from '@expo/vector-icons';
import { supabase } from "../../supabase/supabaseClient";
import Header from '../components/Header';
import AndroidFooterSpacer from '../components/Footer';
import * as ImagePicker from 'expo-image-picker';
const API_BASE = "http://192.168.100.83:3000/api"
const API_ORIGIN = API_BASE.replace(/\/api$/, "");

const GalleryScreen = () => {
  const navigation = useNavigation();
  const router = useRouter();
  const [categories, setCategories] = useState([]);
  const [selectedCategories, setSelectedCategories] = useState([]);
  const [curatedArtworks, setCuratedArtworks] = useState([]);
  const [recentlyAdded, setRecentlyAdded] = useState([]);
  const [loading, setLoading] = useState(true);
  const [refreshing, setRefreshing] = useState(false);
  const [totalArtworks, setTotalArtworks] = useState(0);
  const [role, setRole] = useState(null);
  const [accessToken, setAccessToken] = useState(null);
  const [refreshToken, setRefreshToken] = useState(null);
  const [artModalVisible, setArtModalVisible] = useState(false);
  const [artImages, setArtImages] = useState([]); // [{ uri }]
  const [artTitle, setArtTitle] = useState("");
  const [artDescription, setArtDescription] = useState("");
  const [artMedium, setArtMedium] = useState("");
  const [artCategories, setArtCategories] = useState([]); // array of category names
  const [artUploading, setArtUploading] = useState(false);

  const loadSession = async () => {
    const { data } = await supabase.auth.getSession();
    return {
      at: data?.session?.access_token || null,
      rt: data?.session?.refresh_token || null,
    };
  };

  useEffect(() => {
    const init = async () => {
      const { at, rt } = await loadSession();
      setAccessToken(at);
      setRefreshToken(rt);
      try {
        const res = await fetch(`${API_BASE}/users/role`, {
          method: 'GET',
          credentials: 'include',
          headers: { Cookie: `access_token=${at}; refresh_token=${rt}` },
        });
        const bodyText = await res.text();
        let data = null; try { data = bodyText ? JSON.parse(bodyText) : null; } catch { data = bodyText; }
        const resolvedRole = typeof data === 'string' ? data : (data?.role || data?.user?.role || null);
        setRole(resolvedRole);
      } catch (e) {
        setRole(null);
      }
    };
    init();
  }, []);

  const fetchCategories = async () => {
    try {
      const { at, rt } = await loadSession();
      const res = await fetch(`${API_BASE}/gallery/getCategories`, {
        method: 'GET',
        credentials: 'include',
        headers: { 'Content-Type': 'application/json', Cookie: `access_token=${at}; refresh_token=${rt}` },
      });
      const data = await res.json();
      if (data.success && data.categories) {
        const allCategory = { field: 'all', name: 'All', count: data.totalCount || 0 };
        setCategories([allCategory, ...data.categories]);
      }
    } catch (error) {
      console.error('Error fetching categories:', error);
    }
  };

  const fetchArtworks = async (categoryFilter = 'all') => {
    try {
      const { at, rt } = await loadSession();
      const queryParams = new URLSearchParams();
      if (categoryFilter !== 'all') {
        queryParams.append('categories', categoryFilter);
      }
      queryParams.append('page', '1');
      queryParams.append('limit', '50');
      
      const res = await fetch(`${API_BASE}/gallery/artworks?${queryParams}`, {
        method: 'GET',
        credentials: 'include',
        headers: { 'Content-Type': 'application/json', Cookie: `access_token=${at}; refresh_token=${rt}` },
      });
      const data = await res.json();
      
      if (data.success && data.artworks) {
        // Curated Collection: Featured artworks first
        const featured = data.artworks.filter(art => art.featured === true).slice(0, 6);
        setCuratedArtworks(featured.length > 0 ? featured : data.artworks.slice(0, 6));
        
        // Recently Added: Latest artworks (using datePosted from controller)
        const sorted = [...data.artworks].sort((a, b) => 
          new Date(b.datePosted || 0) - new Date(a.datePosted || 0)
        );
        setRecentlyAdded(sorted.slice(0, 6));
        
        // Store total count
        setTotalArtworks(data.totalCount || data.artworks.length);
      }
    } catch (error) {
      console.error('Error fetching artworks:', error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchCategories();
    fetchArtworks();
  }, []);

  const handleCategoryChange = (newCategories) => {
    setSelectedCategories(newCategories);
    setLoading(true);
    const filterValue = newCategories.length === 0 ? 'all' : newCategories.join(',');
    fetchArtworks(filterValue);
  };

  const onRefresh = async () => {
    setRefreshing(true);
    try {
      await Promise.all([
        fetchCategories(),
        fetchArtworks(selectedCategories.length === 0 ? 'all' : selectedCategories.join(','))
      ]);
    } catch (error) {
      console.error('Refresh error:', error);
    } finally {
      setRefreshing(false);
    }
  };

  const resolveImageUrl = (imageData) => {
    if (!imageData) return null;
    // Handle array of images (get first image)
    const imageUrl = Array.isArray(imageData) ? imageData[0] : imageData;
    if (!imageUrl) return null;
    return imageUrl.startsWith('http') ? imageUrl : `${API_ORIGIN}${imageUrl}`;
  };

  const renderArtworkCard = (item) => (
    <TouchableOpacity 
      style={styles.card} 
      key={item.id}
      onPress={() => {
        console.log('Navigating to artwork:', item.id, 'Full item:', item);
        router.push(`/viewGallery?artworkId=${item.id}`);
      }}
    >
      <Image 
        source={{ uri: resolveImageUrl(item.image) }} 
        style={styles.cardImage}
        defaultSource={require('../../assets/icon.png')}
      />
      <Text style={styles.cardTitle} numberOfLines={1}>{item.title || 'Untitled'}</Text>
      <Text style={styles.cardAuthor} numberOfLines={1}>by {item.artist || 'Unknown Artist'}</Text>
    </TouchableOpacity>
  );

  const handleAddArtwork = () => {
    const r = String(role || '').toLowerCase();
    if (!(r === 'artist' || r === 'admin')) {
      Alert.alert('Not allowed', 'Only artists can upload artworks.');
      return;
    }
    setArtImages([]);
    setArtTitle("");
    setArtDescription("");
    setArtMedium("");
    setArtCategories([]);
    setArtModalVisible(true);
  };

  const pickArtworkImage = async () => {
    const result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.Images,
      allowsMultipleSelection: true,
      selectionLimit: 10,
      allowsEditing: false,
      quality: 1,
    });
    if (!result.canceled && Array.isArray(result.assets)) {
      const picked = result.assets.map(a => ({ uri: a.uri }));
      setArtImages(prev => [...prev, ...picked]);
    }
  };

  const uploadArtwork = async () => {
    try {
      const at = accessToken, rt = refreshToken;
      const fd = new FormData();
      if (Array.isArray(artImages) && artImages.length > 0) {
        artImages.forEach((img, idx) => {
          if (img?.uri) {
            fd.append('image', { uri: img.uri, name: `artwork_${idx + 1}.jpg`, type: 'image/jpeg' });
          }
        });
      }
      if (artTitle) fd.append('title', String(artTitle));
      if (artDescription) fd.append('description', String(artDescription));
      if (artMedium) fd.append('medium', String(artMedium));
      if (Array.isArray(artCategories) && artCategories.length > 0) {
        fd.append('categories', artCategories.join(','));
      }
      const res = await fetch(`${API_BASE}/gallery/upload`, {
        method: 'POST',
        headers: { Cookie: `access_token=${at}; refresh_token=${rt}` },
        body: fd,
      });
      const bodyText = await res.text();
      if (!res.ok) {
        let msg = bodyText || 'Upload failed';
        try { const j = bodyText ? JSON.parse(bodyText) : null; msg = j?.message || j?.error || msg; } catch {}
        throw new Error(msg);
      }
      try {
        const filterValue = selectedCategories.length === 0 ? 'all' : selectedCategories.join(',');
        await fetchArtworks(filterValue);
      } catch {}
      setArtModalVisible(false);
      setArtImages([]);
      setArtTitle("");
      setArtDescription("");
      setArtMedium("");
      setArtCategories([]);
      Alert.alert('Success', 'Artwork uploaded');
    } catch (e) {
      Alert.alert('Upload failed', e?.message || 'Could not upload artwork');
    }
  };

  const submitArtwork = async () => {
    if (!Array.isArray(artImages) || artImages.length === 0) {
      Alert.alert('Missing images', 'Please select at least one artwork image.');
      return;
    }
    setArtUploading(true);
    try {
      await uploadArtwork();
    } finally {
      setArtUploading(false);
    }
  };

  return (
    <SafeAreaView style={styles.container}>
      <Header title="Gallery" showSearch={false} />

      <ScrollView 
        showsVerticalScrollIndicator={false}
        refreshControl={
          <RefreshControl
            refreshing={refreshing}
            onRefresh={onRefresh}
            colors={['#A68C7B']}
            tintColor="#A68C7B"
          />
        }
      >
        {/* Filter Collection (Categories) */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Filter Collection</Text>
          <ScrollView horizontal showsHorizontalScrollIndicator={false} style={styles.filterScroll}>
            {categories.map((category) => {
              const isAll = category.name === 'All';
              const isSelected = isAll ? selectedCategories.length === 0 : selectedCategories.includes(category.name);
              const onPress = () => {
                if (isAll) {
                  handleCategoryChange([]);
                } else {
                  let next;
                  if (selectedCategories.includes(category.name)) {
                    next = selectedCategories.filter(c => c !== category.name);
                  } else {
                    next = [...selectedCategories, category.name];
                  }
                  handleCategoryChange(next);
                }
              };
              return (
                <TouchableOpacity
                  key={category.field}
                  style={[styles.filterChip, isSelected && styles.filterChipActive]}
                  onPress={onPress}
                >
                  <Text style={[styles.filterChipText, isSelected && styles.filterChipTextActive]}>
                    {category.name} ({category.count || 0})
                  </Text>
                </TouchableOpacity>
              );
            })}
          </ScrollView>
        </View>

        {loading ? (
          <View style={styles.loadingContainer}>
            <ActivityIndicator size="large" color="#A68C7B" />
          </View>
        ) : (
          <>
            {/* Empty State */}
            {recentlyAdded.length === 0 && curatedArtworks.length === 0 ? (
              <View style={styles.emptyContainer}>
                <Ionicons name="image-outline" size={64} color="#A68C7B" style={{ marginBottom: 16 }} />
                <Text style={styles.emptyTitle}>No Artworks Found</Text>
                <Text style={styles.emptyMessage}>
                  There are no artworks in this category yet.
                </Text>
                <TouchableOpacity 
                  style={styles.emptyButton}
                  onPress={() => handleCategoryChange([])}
                >
                  <Text style={styles.emptyButtonText}>View All Artworks</Text>
                </TouchableOpacity>
              </View>
            ) : (
              <>
                {/* Recently Added */}
                {recentlyAdded.length > 0 && (
                  <View style={styles.section}>
                    <Text style={styles.sectionTitle}>Recently Added</Text>
                    <View style={styles.cardGrid}>
                      {recentlyAdded.map(renderArtworkCard)}
                    </View>
                  </View>
                )}

                {/* Curated Collection */}
                {curatedArtworks.length > 0 && (
                  <View style={styles.section}>
                    <Text style={styles.sectionTitle}>Curated Collection</Text>
                    <View style={styles.cardGrid}>
                      {curatedArtworks.map(renderArtworkCard)}
                    </View>
                  </View>
                )}
                
                {/* End of Collection Message */}
                <View style={styles.dividerContainer}>
                  <View style={styles.dividerLine} />
                </View>
                <View style={styles.endOfCollection}>
                  <Ionicons name="checkmark-circle" size={48} color="#A68C7B" />
                  <Text style={styles.endTitle}>You've reached the end of the collection</Text>
                  <Text style={styles.endMessage}>Showing all {totalArtworks} {totalArtworks === 1 ? 'artwork' : 'artworks'}</Text>
                </View>
              </>
            )}
          </>
        )}
      </ScrollView>
      {(String(role || '').toLowerCase() === 'artist' || String(role || '').toLowerCase() === 'admin') && (
        <TouchableOpacity style={styles.floatingBtn} onPress={handleAddArtwork} activeOpacity={0.9}>
          <Text style={styles.floatingBtnText}>+</Text>
        </TouchableOpacity>
      )}

      <Modal
        visible={artModalVisible}
        animationType="slide"
        transparent
        presentationStyle="overFullScreen"
        onRequestClose={() => setArtModalVisible(false)}
      >
        <TouchableWithoutFeedback onPress={Keyboard.dismiss}>
          <View style={styles.modalOverlay}>
            <KeyboardAvoidingView behavior={Platform.OS === 'ios' ? 'padding' : 'height'} style={styles.keyboardView}>
              <View style={styles.modalBox}>
                <Text style={styles.modalTitle}>Upload Artwork</Text>

                <TouchableOpacity onPress={pickArtworkImage} style={styles.imagePicker} activeOpacity={0.8}>
                  <View style={[styles.selectedImagePreview, styles.placeholderCircle]}>
                    <Ionicons name="images-outline" size={36} color="#999" />
                  </View>
                  <Text style={styles.changePhotoText}>Choose Images</Text>
                </TouchableOpacity>

                {Array.isArray(artImages) && artImages.length > 0 && (
                  <ScrollView horizontal showsHorizontalScrollIndicator={false} style={styles.thumbnailsRow}>
                    {artImages.map((img, idx) => (
                      <Image key={`${img.uri}-${idx}`} source={img} style={styles.thumbnail} />
                    ))}
                  </ScrollView>
                )}

                <TextInput style={styles.input} placeholder="Title" placeholderTextColor="#999" value={artTitle} onChangeText={setArtTitle} />
                <TextInput style={styles.input} placeholder="Medium" placeholderTextColor="#999" value={artMedium} onChangeText={setArtMedium} />
                <TextInput
                  style={[styles.input, { height: 100, textAlignVertical: 'top' }]}
                  placeholder="Description"
                  placeholderTextColor="#999"
                  multiline
                  value={artDescription}
                  onChangeText={setArtDescription}
                />
                <View style={{ marginBottom: 8 }}>
                  <Text style={{ fontSize: 14, color: '#666', marginBottom: 6 }}>Categories</Text>
                  <ScrollView horizontal showsHorizontalScrollIndicator={false} style={styles.filterScroll}>
                    {categories.filter(c => c.name !== 'All').map((category) => {
                      const isSelected = artCategories.includes(category.name);
                      const onPress = () => {
                        setArtCategories((prev) => (
                          prev.includes(category.name)
                            ? prev.filter(cn => cn !== category.name)
                            : [...prev, category.name]
                        ));
                      };
                      return (
                        <TouchableOpacity
                          key={`modal-cat-${category.field}`}
                          style={[styles.filterChip, isSelected && styles.filterChipActive]}
                          onPress={onPress}
                        >
                          <Text style={[styles.filterChipText, isSelected && styles.filterChipTextActive]}>
                            {category.name}
                          </Text>
                        </TouchableOpacity>
                      );
                    })}
                  </ScrollView>
                </View>

                <View style={styles.actionRow}>
                  <TouchableOpacity style={[styles.actionButton, styles.cancelButton]} onPress={() => setArtModalVisible(false)} disabled={artUploading}>
                    <Text style={[styles.actionButtonText, { color: '#A68C7B' }]}>Cancel</Text>
                  </TouchableOpacity>
                  <TouchableOpacity style={styles.actionButton} onPress={submitArtwork} disabled={artUploading}>
                    <Text style={styles.actionButtonText}>{artUploading ? 'Uploading...' : 'Upload'}</Text>
                  </TouchableOpacity>
                </View>
              </View>
            </KeyboardAvoidingView>
          </View>
        </TouchableWithoutFeedback>
      </Modal>
      <AndroidFooterSpacer />
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: '#fff' },
  section: {
    marginBottom: 20,
  },
  sectionTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    marginHorizontal: 15,
    marginTop: 15,
    marginBottom: 10,
    color: '#A68C7B',
  },
  filterScroll: {
    marginHorizontal: 15,
  },
  filterChip: {
    paddingHorizontal: 16,
    paddingVertical: 8,
    backgroundColor: '#f5f5f5',
    borderRadius: 20,
    marginRight: 10,
    borderWidth: 1,
    borderColor: '#e0e0e0',
  },
  filterChipActive: {
    backgroundColor: '#A68C7B',
    borderColor: '#A68C7B',
  },
  filterChipText: {
    fontSize: 14,
    color: '#666',
  },
  filterChipTextActive: {
    color: '#fff',
    fontWeight: '600',
  },
  cardGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'space-between',
    marginHorizontal: 15,
  },
  card: {
    width: '48%',
    backgroundColor: '#fff',
    borderRadius: 12,
    padding: 8,
    marginBottom: 15,
    shadowColor: '#000',
    shadowOpacity: 0.1,
    shadowOffset: { width: 0, height: 2 },
    shadowRadius: 4,
    elevation: 3,
  },
  cardImage: {
    width: '100%',
    height: 120,
    borderRadius: 8,
    marginBottom: 8,
    backgroundColor: '#f0f0f0',
  },
  cardTitle: {
    fontSize: 14,
    fontWeight: '600',
    color: '#000',
    marginBottom: 2,
  },
  cardAuthor: {
    fontSize: 12,
    color: '#A68C7B',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingVertical: 40,
  },
  emptyContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingVertical: 60,
    paddingHorizontal: 30,
  },
  emptyTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#A68C7B',
    marginBottom: 8,
    textAlign: 'center',
  },
  emptyMessage: {
    fontSize: 14,
    color: '#666',
    textAlign: 'center',
    marginBottom: 24,
    lineHeight: 20,
  },
  emptyButton: {
    backgroundColor: '#A68C7B',
    paddingHorizontal: 24,
    paddingVertical: 12,
    borderRadius: 25,
  },
  emptyButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
  },
  dividerContainer: {
    paddingHorizontal: 30,
    marginTop: 20,
    marginBottom: 10,
  },
  dividerLine: {
    height: 1,
    backgroundColor: '#e0e0e0',
  },
  endOfCollection: {
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 40,
    paddingHorizontal: 30,
    marginBottom: 20,
  },
  endTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#A68C7B',
    marginTop: 12,
    marginBottom: 8,
    textAlign: 'center',
  },
  endMessage: {
    fontSize: 14,
    color: '#666',
    textAlign: 'center',
  },
  floatingBtn: {
    position: 'absolute',
    right: 24,
    bottom: Platform.OS === 'android' ? 60 : 24,
    width: 56,
    height: 56,
    borderRadius: 28,
    backgroundColor: '#A68C7B',
    alignItems: 'center',
    justifyContent: 'center',
    shadowColor: '#000',
    shadowOpacity: 0.2,
    shadowOffset: { width: 0, height: 2 },
    shadowRadius: 4,
    elevation: 6,
  },
  floatingBtnText: {
    color: '#fff',
    fontSize: 28,
    fontWeight: '800',
    marginTop: -2,
  },
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0,0,0,0.4)',
    alignItems: 'center',
    justifyContent: 'center',
    paddingHorizontal: 20,
  },
  keyboardView: { width: '100%' },
  modalBox: {
    backgroundColor: '#fff',
    borderRadius: 16,
    padding: 16,
    width: '100%',
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: '700',
    color: '#A68C7B',
    marginBottom: 12,
  },
  imagePicker: {
    alignItems: 'center',
    marginBottom: 12,
  },
  selectedImagePreview: {
    width: 120,
    height: 120,
    borderRadius: 12,
    backgroundColor: '#f0f0f0',
    marginBottom: 8,
  },
  placeholderCircle: {
    alignItems: 'center',
    justifyContent: 'center',
  },
  changePhotoText: {
    color: '#666',
    fontSize: 13,
  },
  thumbnailsRow: {
    marginBottom: 10,
    paddingHorizontal: 12,
  },
  thumbnail: {
    width: 72,
    height: 72,
    borderRadius: 8,
    backgroundColor: '#f0f0f0',
    marginRight: 8,
  },
  input: {
    borderWidth: 1,
    borderColor: '#e0e0e0',
    borderRadius: 10,
    paddingHorizontal: 12,
    paddingVertical: 10,
    marginBottom: 10,
    fontSize: 14,
    color: '#000',
  },
  actionRow: {
    flexDirection: 'row',
    justifyContent: 'flex-end',
    gap: 12,
    marginTop: 8,
  },
  actionButton: {
    backgroundColor: '#A68C7B',
    paddingHorizontal: 18,
    paddingVertical: 12,
    borderRadius: 10,
    marginLeft: 10,
  },
  cancelButton: {
    backgroundColor: '#fff',
    borderWidth: 1,
    borderColor: '#A68C7B',
  },
  actionButtonText: {
    color: '#fff',
    fontSize: 14,
    fontWeight: '700',
  },
});

export default GalleryScreen;
